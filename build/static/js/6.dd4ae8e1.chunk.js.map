{"version":3,"sources":["components/hooks/use-http.js","components/lib/api.js","components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","useHttp","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","a","message","FIREBASE_DOMAIN","process","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","deleteSingleQuote","module","exports","QuoteItem","text","author","setUpdateState","useEffect","className","LoadingSpinner","classes","item","to","delete","onClick","color","QuoteList","props","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","path","pathname","list","map","quote","NoQuotesFound","noquotes","AllQuotes","loadedQuotes","useState","updateState","length"],"mappings":"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","file":"static/js/6.dd4ae8e1.chunk.js","sourcesContent":["import { useReducer, useCallback } from 'react';\r\n\r\nfunction httpReducer(state, action) {\r\n  if (action.type === 'SEND') {\r\n    return {\r\n      data: null,\r\n      error: null,\r\n      status: 'pending',\r\n    };\r\n  }\r\n\r\n  if (action.type === 'SUCCESS') {\r\n    return {\r\n      data: action.responseData,\r\n      error: null,\r\n      status: 'completed',\r\n    };\r\n  }\r\n\r\n  if (action.type === 'ERROR') {\r\n    return {\r\n      data: null,\r\n      error: action.errorMessage,\r\n      status: 'completed',\r\n    };\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nfunction useHttp(requestFunction, startWithPending = false) {\r\n  const [httpState, dispatch] = useReducer(httpReducer, {\r\n    status: startWithPending ? 'pending' : null,\r\n    data: null,\r\n    error: null,\r\n  });\r\n\r\n  const sendRequest = useCallback(\r\n    async function (requestData) {\r\n      dispatch({ type: 'SEND' });\r\n      try {\r\n        const responseData = await requestFunction(requestData);\r\n        dispatch({ type: 'SUCCESS', responseData });\r\n      } catch (error) {\r\n        dispatch({\r\n          type: 'ERROR',\r\n          errorMessage: error.message || 'Something went wrong!',\r\n        });\r\n      }\r\n    },\r\n    [requestFunction]\r\n  );\r\n\r\n  return {\r\n    sendRequest,\r\n    ...httpState,\r\n  };\r\n}\r\n\r\nexport default useHttp;\r\n","const FIREBASE_DOMAIN = process.env.REACT_APP_FIREBASE_API;\r\n\r\nexport async function getAllQuotes() {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || \"Could not fetch quotes.\");\r\n  }\r\n\r\n  const transformedQuotes = [];\r\n\r\n  for (const key in data) {\r\n    const quoteObj = {\r\n      id: key,\r\n      ...data[key],\r\n    };\r\n\r\n    transformedQuotes.push(quoteObj);\r\n  }\r\n\r\n  return transformedQuotes;\r\n}\r\n\r\nexport async function getSingleQuote(quoteId) {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || \"Could not fetch quote.\");\r\n  }\r\n\r\n  const loadedQuote = {\r\n    id: quoteId,\r\n    ...data,\r\n  };\r\n\r\n  return loadedQuote;\r\n}\r\n\r\nexport async function addQuote(quoteData) {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(quoteData),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || \"Could not create quote.\");\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport async function addComment(requestData) {\r\n  const response = await fetch(\r\n    `${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`,\r\n    {\r\n      method: \"POST\",\r\n      body: JSON.stringify(requestData.commentData),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }\r\n  );\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || \"Could not add comment.\");\r\n  }\r\n\r\n  return { commentId: data.name };\r\n}\r\n\r\nexport async function getAllComments(quoteId) {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\r\n\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || \"Could not get comments.\");\r\n  }\r\n\r\n  const transformedComments = [];\r\n\r\n  for (const key in data) {\r\n    const commentObj = {\r\n      id: key,\r\n      ...data[key],\r\n    };\r\n\r\n    transformedComments.push(commentObj);\r\n  }\r\n\r\n  return transformedComments;\r\n}\r\n\r\nexport async function deleteSingleQuote(quoteId) {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}/.json`, {\r\n    method: \"DELETE\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  });\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || \"An Error Has Occured\");\r\n  }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__3nI6I\",\"delete\":\"QuoteItem_delete__32of3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__291qE\",\"sorting\":\"QuoteList_sorting__3kmxy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__1zp9d\"};","import classes from \"./QuoteItem.module.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { deleteSingleQuote } from \"../lib/api\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst QuoteItem = ({ text, author, id, setUpdateState }) => {\r\n  const { sendRequest, status, error } = useHttp(deleteSingleQuote, true);\r\n\r\n  const deleteQuoteHandler = function () {\r\n    sendRequest(id);\r\n    setUpdateState(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    sendRequest();\r\n  }, [sendRequest]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered focused\">{error}</p>;\r\n  }\r\n\r\n  return (\r\n    <li className={classes.item}>\r\n      <figure>\r\n        <blockquote>\r\n          <p>{text}</p>\r\n        </blockquote>\r\n        <figcaption>{author}</figcaption>\r\n      </figure>\r\n      <Link to={`/quotes/${id}`} className=\"btn\">\r\n        View Fullscreen\r\n      </Link>\r\n      <div className={classes.delete} onClick={deleteQuoteHandler}>\r\n        <DeleteIcon color=\"error\" />\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default QuoteItem;\r\n","import { Fragment } from \"react\";\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\nimport QuoteItem from \"./QuoteItem\";\r\nimport classes from \"./QuoteList.module.css\";\r\n\r\nconst sortQuotes = (quotes, ascending) => {\r\n  return quotes.sort((quoteA, quoteB) => {\r\n    if (ascending) {\r\n      return quoteA.id > quoteB.id ? 1 : -1;\r\n    } else {\r\n      return quoteA.id < quoteB.id ? 1 : -1;\r\n    }\r\n  });\r\n};\r\n\r\nconst QuoteList = (props) => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  const queryParams = new URLSearchParams(location.search);\r\n\r\n  const isSortingAscending = queryParams.get(\"sort\") === \"asc\";\r\n\r\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\r\n\r\n  const changeSortHandler = function () {\r\n    history.push({\r\n      path: location.pathname,\r\n      search: `?sort=${isSortingAscending ? \"desc\" : \"asc\"}`,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className={classes.sorting}>\r\n        <button onClick={changeSortHandler}>\r\n          Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}\r\n        </button>\r\n      </div>\r\n      <ul className={classes.list}>\r\n        {sortedQuotes.map((quote) => (\r\n          <QuoteItem\r\n            key={quote.id}\r\n            id={quote.id}\r\n            author={quote.author}\r\n            text={quote.text}\r\n            setUpdateState={props.setUpdateState}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteList;\r\n","import classes from \"./NoQuotesFound.module.css\";\r\nimport { Link } from \"react-router-dom\";\r\nconst NoQuotesFound = () => {\r\n  return (\r\n    <div className={classes.noquotes}>\r\n      <p>No quotes found!</p>\r\n      <Link to={`/newQuote`} className=\"btn\">\r\n        Add a Quote\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoQuotesFound;\r\n","import { useState, useEffect } from \"react\";\r\nimport QuoteList from \"../components/quotes/QuoteList\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\nimport useHttp from \"../components/hooks/use-http\";\r\nimport { getAllQuotes } from \"../components/lib/api\";\r\n\r\nconst AllQuotes = () => {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuotes,\r\n    error,\r\n  } = useHttp(getAllQuotes, true);\r\n\r\n  const [updateState, setUpdateState] = useState(false);\r\n\r\n  useEffect(() => {\r\n    sendRequest();\r\n\r\n    if (updateState) {\r\n      sendRequest();\r\n    }\r\n    setUpdateState(false);\r\n  }, [sendRequest, updateState]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered focused\">{error}</p>;\r\n  }\r\n\r\n  if (status === \"completed\" && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n    return <NoQuotesFound />;\r\n  }\r\n\r\n  return <QuoteList quotes={loadedQuotes} setUpdateState={setUpdateState} />;\r\n};\r\n\r\nexport default AllQuotes;\r\n"],"sourceRoot":""}