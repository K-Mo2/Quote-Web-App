{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","textInputRef","useState","inputIsValid","setInputIsValid","inputTouched","setInputTouched","invalidInputStyles","invalidInput","inputBlurHandler","event","target","value","trim","inputFocusHandler","when","message","form","onSubmit","preventDefault","enteredAuthor","current","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","onBlur","onFocus","rows","actions","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,aAAe,gCAAgC,QAAU,2BAA2B,QAAU,6B,iICKrKC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCyF/BC,EArFG,SAACL,GACjB,IAAMM,EAAiBC,mBACjBC,EAAeD,mBACrB,EAAwCE,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACMC,EACHF,IAAiBF,IAAkBA,EAChCR,IAAQa,aACR,GAiBN,IAAMC,EAAmB,SAACC,GACxBJ,GAAgB,GACkB,KAA9BI,EAAMC,OAAOC,MAAMC,QAAiBR,GACtCD,GAAgB,IAGdU,EAAoB,WACxBR,GAAgB,GAChBF,GAAgB,IAGlB,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CACEW,KAAMV,IAAiBF,EACvBa,QAAQ,6CAEV,cAAC,EAAD,UACE,uBACEtB,UAAWC,IAAQsB,KACnBC,SAAUf,EAnClB,SAA2BO,GACzBA,EAAMS,iBAEN,IAAMC,EAAgBrB,EAAesB,QAAQT,MACvCU,EAAcrB,EAAaoB,QAAQT,MAGpCQ,GAAkBE,EAKvB7B,EAAM8B,WAAW,CAAEC,OAAQJ,EAAeK,KAAMH,IAJ9ClB,GAAgB,IA2BiC,KAF/C,UAIGX,EAAMiC,WACL,qBAAKhC,UAAWC,IAAQgC,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAKlC,UAAWC,IAAQkC,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBACEC,KAAK,OACLC,GAAG,SACHC,IAAKlC,EACLmC,OAAQzB,EACR0B,QAASrB,EACTpB,UAAWa,OAGf,sBAAKb,UAAWC,IAAQkC,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BACEE,GAAG,OACHI,KAAK,IACLH,IAAKhC,EACLiC,OAAQzB,EACR0B,QAASrB,EACTpB,UAAWa,OAGf,qBAAKb,UAAWC,IAAQ0C,QAAxB,SACE,wBAAQ3C,UAAU,MAAlB,0BAEAS,GAAgB,qE,gBC/Eb,SAASmC,IACtB,MAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,EAAUC,cAEhBC,qBAAU,WACO,cAAXH,GACFC,EAAQG,KAAK,aAEd,CAACJ,EAAQC,IAMZ,OACE,8BACE,cAAC,EAAD,CACEjB,UAAsB,YAAXgB,EACXnB,WARkB,SAACwB,GACvBN,EAAYM","file":"static/js/7.2bfde4b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__Uur1-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__jxj7j\",\"loading\":\"QuoteForm_loading__3gjZy\",\"invalidInput\":\"QuoteForm_invalidInput__1UkD7\",\"control\":\"QuoteForm_control__2j2Js\",\"actions\":\"QuoteForm_actions__3of8T\"};","import classes from './Card.module.css';\r\n\r\nconst Card = (props) => {\r\n  return <div className={classes.card}>{props.children}</div>;\r\n};\r\n\r\nexport default Card;\r\n","import { useRef, Fragment, useState } from \"react\";\r\nimport { Prompt } from \"react-router-dom\";\r\n\r\nimport Card from \"../UI/Card\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport classes from \"./QuoteForm.module.css\";\r\n\r\nconst QuoteForm = (props) => {\r\n  const authorInputRef = useRef();\r\n  const textInputRef = useRef();\r\n  const [inputIsValid, setInputIsValid] = useState(true);\r\n  const [inputTouched, setInputTouched] = useState(false);\r\n  const invalidInputStyles =\r\n    (inputTouched && !inputIsValid) || !inputIsValid\r\n      ? classes.invalidInput\r\n      : \"\";\r\n\r\n  function submitFormHandler(event) {\r\n    event.preventDefault();\r\n\r\n    const enteredAuthor = authorInputRef.current.value;\r\n    const enteredText = textInputRef.current.value;\r\n\r\n    // optional: Could validate here\r\n    if (!enteredAuthor || !enteredText) {\r\n      setInputIsValid(false);\r\n      return;\r\n    }\r\n\r\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\r\n  }\r\n\r\n  const inputBlurHandler = (event) => {\r\n    setInputTouched(true);\r\n    if (event.target.value.trim() === \"\" && inputTouched) {\r\n      setInputIsValid(false);\r\n    }\r\n  };\r\n  const inputFocusHandler = function () {\r\n    setInputTouched(true);\r\n    setInputIsValid(true);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Prompt\r\n        when={inputTouched && !inputIsValid}\r\n        message=\"Are you sure you want to leave this page\"\r\n      />\r\n      <Card>\r\n        <form\r\n          className={classes.form}\r\n          onSubmit={inputIsValid ? submitFormHandler : null}\r\n        >\r\n          {props.isLoading && (\r\n            <div className={classes.loading}>\r\n              <LoadingSpinner />\r\n            </div>\r\n          )}\r\n\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"author\">Author</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"author\"\r\n              ref={authorInputRef}\r\n              onBlur={inputBlurHandler}\r\n              onFocus={inputFocusHandler}\r\n              className={invalidInputStyles}\r\n            />\r\n          </div>\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"text\">Text</label>\r\n            <textarea\r\n              id=\"text\"\r\n              rows=\"5\"\r\n              ref={textInputRef}\r\n              onBlur={inputBlurHandler}\r\n              onFocus={inputFocusHandler}\r\n              className={invalidInputStyles}\r\n            ></textarea>\r\n          </div>\r\n          <div className={classes.actions}>\r\n            <button className=\"btn\">Add Quote</button>\r\n          </div>\r\n          {!inputIsValid && <h3>Please enter a valid input</h3>}\r\n        </form>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteForm;\r\n","import React, { useEffect } from \"react\";\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport { useHistory } from \"react-router\";\r\nimport useHttp from \"../components/hooks/use-http\";\r\nimport { addQuote } from \"../components/lib/api\";\r\n\r\nexport default function NewQuote() {\r\n  const { sendRequest, status } = useHttp(addQuote);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      history.push(\"/quotes\");\r\n    }\r\n  }, [status, history]);\r\n\r\n  const addQuoteHandler = (quoteData) => {\r\n    sendRequest(quoteData);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <QuoteForm\r\n        isLoading={status === \"pending\"}\r\n        onAddQuote={addQuoteHandler}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}